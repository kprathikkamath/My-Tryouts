import math

def inverse_kinematics(x, y, z):
    # x, y, and z in mm
    #sb is base equilateral triangle side in mm
    #sp is platform equilateral triangle side in mm
    #L is upper legs length in mm
    #l is lower legs parallelogram length in mm
    #h is lower legs parallelogram width in mm (since its linkage not parallelogram leave it)
    sb = 10
    sp = 3
    #h = 131
    l = 20
    L = 10
    
    #a = float(a)
    #b = float(b)
    #c = float(c)
    #x = float(x)
    #y = float(y)
    #z = float(z)
    #wb = float(wb)
    #ub = float(ub)
    #wp = float(wp)
    #up = float(up)
    #sb = float(sb)
    #sp = float(sp)
    
    wb = (((math.sqrt(3))/6)*sb)
    ub = (((math.sqrt(3))/3)*sb)
    wp = (((math.sqrt(3))/6)*sp)
    up = (((math.sqrt(3))/3)*sp)
    
    a = wb - up
    b = (sp/2) - (((math.sqrt(3))/2)*wb)
    c = wp - (0.5 * wb)

    
    #First joint
    E1 = 2*L*(y+a)
    F1 = 2*z*L
    G1 = (x**2)+(y**2)+(z**2)+(a**2)+(L**2)+(2*y*a)-(l**2)
    t1_1 = (-F1+math.sqrt(E1**2+F1**2-G1**2))/(G1-E1)
    t1_2 = (-F1-math.sqrt(E1**2+F1**2-G1**2))/(G1-E1)
    th1_1 = (180/math.pi)*2*math.atan(t1_1)
    th1_2 = (180/math.pi)*2*math.atan(t1_2)
    
    #Second joint
    E2 = -L*(((math.sqrt(3))*(x+b))+y+c)
    F2 = 2*z*L
    G2 = (x**2)+(y**2)+(z**2)+(b**2)+(c**2)+(L**2)+(2*((x*b)+(y*c)))-(l**2)
    t2_1 = (-F2+math.sqrt(E2**2+F2**2-G2**2))/(G2-E2)
    t2_2 = (-F2-math.sqrt(E2**2+F2**2-G2**2))/(G2-E2)
    th2_1 = (180/math.pi)*2*math.atan(t2_1)
    th2_2 = (180/math.pi)*2*math.atan(t2_2)
    
    #Third joint
    E3 = L*(((math.sqrt(3))*(x-b))-y-c)
    F3 = 2*z*L
    G3 = (x**2)+(y**2)+(z**2)+(b**2)+(c**2)+(L**2)+(2*((-(x*b))+(y*c)))-(l**2)
    t3_1 = (-F3+math.sqrt(E3**2+F3**2-G3**2))/(G3-E3)
    t3_2 = (-F3-math.sqrt(E3**2+F3**2-G3**2))/(G3-E3)
    th3_1 = (180/math.pi)*2*math.atan(t3_1)
    th3_2 = (180/math.pi)*2*math.atan(t3_2)

    if th1_1 > -120 and th1_1 < 150 and th2_1 > -120 and th2_1 < 150 and th3_1 > -120 and th3_1 < 150:
        if abs(th1_1)<abs(th1_2) and abs(th2_1)<abs(th2_2) and abs(th3_1)<abs(th3_2):
            th1 = th1_1
            th2 = th2_1
            th3 = th3_1
            return [th1, th2, th3]
        elif abs(th1_1)>abs(th1_2) and abs(th2_1)>abs(th2_2) and abs(th3_1)>abs(th3_2):
            th1 = th1_2
            th2 = th2_2
            th3 = th3_2
            return [th1, th2, th3]
    elif th1_2 > -120 and th1_2 < 150 and th2_2 > -120 and th2_2 < 150 and th3_2 > -120 and th3_2 < 150:
        if abs(th1_1)<abs(th1_2) and abs(th2_1)<abs(th2_2) and abs(th3_1)<abs(th3_2):
            th1 = th1_1
            th2 = th2_1
            th3 = th3_1
            return [th1, th2, th3]
        elif abs(th1_1)>abs(th1_2) and abs(th2_1)>abs(th2_2) and abs(th3_1)>abs(th3_2):
            th1 = th1_2
            th2 = th2_2
            th3 = th3_2
            return [th1, th2, th3]
        
[atetha,btetha,ctetha] = inverse_kinematics(10, 10, 10)
print(atetha)
print(btetha)
print(ctetha)
